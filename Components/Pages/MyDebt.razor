@page "/debt"
@using PennyPal.Model
@inject UserService UserService

<h1>User Debts</h1>

<table class="table">
    <thead>
        <tr>
            <th>Debt ID</th>
            <th>Main Debt</th>
            <th>Paid Amount</th>
            <th>Date</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in Data.Debts.Where(d => d.UserId == loggedInUserId))
        {
            <tr>
                <td>@debt.Id</td>
                <td>
                    @(Data.Debts.Where(d => d.UserId == loggedInUserId).Sum(d => d.Amount) -
                        Data.Debts.Where(d => d.UserId == loggedInUserId).Sum(d => d.PaidAmount))
                </td>
                <td>@debt.PaidAmount</td>
                <td>@debt.Date.ToString("MM/dd/yyyy")</td>
                <td>@debt.Description</td>
            </tr>
        }
    </tbody>
</table>

<h2>Add New Debt</h2>
<EditForm Model="newDebt" OnValidSubmit="HandleDebtSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="amount">Debt Amount</label>
        <InputNumber id="amount" @bind-Value="newDebt.Amount" class="form-control" />
    </div>

    <div class="form-group">
        <label for="paidAmount">Paid Amount</label>
        <InputNumber id="paidAmount" @bind-Value="newDebt.PaidAmount" class="form-control" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newDebt.Description" class="form-control" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Add Debt</button>
    </div>
</EditForm>

@code {
    private User Data;
    private Debts newDebt = new Debts();
    private int loggedInUserId = 1; // Simulating logged-in user ID, replace with dynamic value

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
    }

    private void HandleDebtSubmit()
    {
        // Add the new debt to the debts list
        newDebt.Id = Data.Debts.Count + 1;
        newDebt.Date = DateTime.Now;
        newDebt.UserId = loggedInUserId; // Associate debt with the logged-in user
        Data.Debts.Add(newDebt);

        // Create a corresponding transaction for the debt
        var newTransaction = new Transactions
            {
                Id = Data.Transactions.Count + 1,
                UserId = loggedInUserId, // Associate transaction with the logged-in user
                Credit = newDebt.Amount, // Record the total debt amount as a Debit transaction
                Debit = 0,
                Date = newDebt.Date,
                Description = $"Debt Added: {newDebt.Description}"
            };
        Data.Transactions.Add(newTransaction);

        // Save the updated data
        UserService.SaveUsers(Data);

        // Reset the form
        newDebt = new Debts();
    }
}
