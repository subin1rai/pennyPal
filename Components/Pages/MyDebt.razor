@page "/debt"
@using PennyPal.Model
@inject UserService UserService
@inject LoginSession LoginSession

<h1>User Debts</h1>
<div>
    <h3>Total Debt Amount: @CurrencySymbol @(string.Format("{0:F2}", Data?.Debts?.Sum(d => d.Amount * ExchangeRate)))</h3>
</div>

<div class="transaction-list">
    @foreach (var debt in Data.Debts)
    {
        <div class="cards-trans">
            <div class="date_head">
                <p>Debt Id: @debt.Id</p>
                <p>Date: @debt.Date.ToString("MM/dd/yyyy")</p>
                <p>Due Date: @debt.DueDate.ToString("MM/dd/yyyy")</p>
            </div>

            <div class="amount">
                <p>Amount: @CurrencySymbol @(string.Format("{0:F2}", debt.Amount * ExchangeRate))</p>
            </div>

            <div class="amount">
                <p>Paid Amount: @CurrencySymbol @(string.Format("{0:F2}", debt.PaidAmount * ExchangeRate))</p>
                <p>Remaining Amount: @CurrencySymbol @(string.Format("{0:F2}", debt.RemainingAmount * ExchangeRate))</p>
            </div>

            <div class="amount">
                <p>Status: @debt.Status</p>
            </div>

            <div class="description">
                <p>Source: @debt.Source</p>
                <p>Note: @debt.Description</p>
            </div>

            @if (debt.Status != DebtStatus.Clear)
            {
                <button class="btn btn-warning yellow" @onclick="() => OpenInstallmentModal(debt)">Clear in Installments</button>
            }

            @if (debt.Status == DebtStatus.Clear)
            {
                <button class="btn btn-danger" @onclick="() => DeleteDebt(debt)">Delete</button>
            }
        </div>
    }
</div>

<button class="btn btn-primary" @onclick="OpenModal">Add New Debt</button>
@if (isInstallmentModalOpen)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Pay in Installments</h5>
                    <button type="button" class="btn-close" @onclick="CloseInstallmentModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="installmentPayment" OnValidSubmit="HandleInstallmentPayment">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (isInsufficientBalance)
                        {
                            <div class="alert alert-danger">
                                <p>Insufficient balance or invalid installment amount.</p>
                            </div>
                        }

                        <div class="form-group">
                            <label for="installmentAmount">Installment Amount</label>
                            <InputNumber id="installmentAmount" @bind-Value="installmentPayment.Amount" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <button type="submit" class="btn btn-primary">Pay Installment</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (isModalOpen)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Debt</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newDebt" OnValidSubmit="HandleDebtSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="amount">Debt Amount</label>
                            <InputNumber id="amount" @bind-Value="newDebt.Amount" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="dueDate">Due Date</label>
                            <InputDate id="dueDate" @bind-Value="newDebt.DueDate" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="source">Source</label>
                            <InputText id="source" @bind-Value="newDebt.Source" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputText id="description" @bind-Value="newDebt.Description" class="form-control" />
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn-blue">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private User Data;
    private Debts newDebt = new Debts();
    private Debts installmentPayment = new Debts();
    private Debts selectedDebt;
    private bool isModalOpen = false;
    private bool isInstallmentModalOpen = false;
    private decimal balance = 0;
    private bool isInsufficientBalance = false;
    private decimal ExchangeRate = 1M;
    private string CurrencySymbol = "NRP";

    protected override void OnInitialized()
    {
        Data = UserService.LoadUsers()?.FirstOrDefault(u => u.Userid == LoginSession.LoggedInUser.Userid);
        if (Data == null)
        {
            throw new InvalidOperationException("User data not found.");
        }

        SetCurrencyPreferences();
        CalculateBalance();
    }

    private void SetCurrencyPreferences()
    {
        var selectedCurrency = LoginSession.SelectedCurrency;

        if (selectedCurrency == "USD")
        {
            ExchangeRate = 0.007221M;
            CurrencySymbol = "$";
        }
        else
        {
            ExchangeRate = 1M;
            CurrencySymbol = "NRP";
        }
    }

    private void OpenModal()
    {
        newDebt = new Debts
            {
                DueDate = DateTime.Now.AddDays(30)
            };
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    private void HandleDebtSubmit()
    {
        if (newDebt.Amount <= 0) return;

        decimal amountInBaseCurrency = newDebt.Amount / ExchangeRate;
        newDebt.Id = Data.Debts?.Count + 1 ?? 1;
        newDebt.Date = DateTime.Now;
        newDebt.Amount = amountInBaseCurrency;
        newDebt.RemainingAmount = amountInBaseCurrency;
        Data.Debts?.Add(newDebt);

        Data.Transactions?.Add(new Transactions
            {
                Id = Data.Transactions?.Count + 1 ?? 1,
                Credit = amountInBaseCurrency,
                Debit = 0,
                Date = newDebt.Date,
                Description = $"Debt Added: {newDebt.Description}",
                Tags = new List<Tag> { new Tag { tagName = "Debt" } }
            });

        UserService.SaveUsers(new List<User> { Data });
        newDebt = new Debts();
        CalculateBalance();
        CloseModal();
    }

    private void OpenInstallmentModal(Debts debt)
    {
        selectedDebt = debt;
        isInstallmentModalOpen = true;
    }

    private void CloseInstallmentModal()
    {
        isInstallmentModalOpen = false;
    }

    private void HandleInstallmentPayment()
    {
        if (installmentPayment.Amount <= 0) return;

        decimal amountInBaseCurrency = installmentPayment.Amount / ExchangeRate;

        if (amountInBaseCurrency > balance || amountInBaseCurrency > selectedDebt.RemainingAmount)
        {
            isInsufficientBalance = true;
            return;
        }

        isInsufficientBalance = false;

        selectedDebt.RemainingAmount -= amountInBaseCurrency;
        selectedDebt.PaidAmount += amountInBaseCurrency;

        if (selectedDebt.RemainingAmount <= 0)
        {
            selectedDebt.Status = DebtStatus.Clear;
        }

        Data.Transactions?.Add(new Transactions
            {
                Id = Data.Transactions?.Count + 1 ?? 1,
                Debit = amountInBaseCurrency,
                Credit = 0,
                Date = DateTime.Now,
                Description = $"Installment Payment: {installmentPayment.Amount}",
                Tags = new List<Tag> { new Tag { tagName = "Installment" } }
            });

        UserService.SaveUsers(new List<User> { Data });
        installmentPayment = new Debts();
        CloseInstallmentModal();
        CalculateBalance();
    }

    private void DeleteDebt(Debts debt)
    {
        Data.Debts?.Remove(debt);
        UserService.SaveUsers(new List<User> { Data });
        CalculateBalance();
    }

    private void CalculateBalance()
    {
        balance = (Data?.Transactions?.Sum(t => t.Credit) ?? 0) - (Data?.Transactions?.Sum(t => t.Debit) ?? 0);
    }
}
