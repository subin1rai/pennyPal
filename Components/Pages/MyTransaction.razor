@page "/transactions"
@using PennyPal.Model
@inject UserService UserService
@inject LoginSession LoginSession

<h1 class="heading">Transactions</h1>

<div class="filters">
    <div class="form-group-new">
        <label for="filter">Filter Transactions:</label>
        <select id="filter" @bind="SelectedFilter" class="form-control-top">
            <option value="All">All</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
        </select>
    </div>

    <div class="form-group-new">
        <label for="tagFilter">Filter by Tag:</label>
        <select id="tagFilter" @bind="SelectedTagFilter" class="form-control-top">
            <option value="All">All</option>
            @foreach (var tag in availableTags)
            {
                <option value="@tag.Id">@tag.tagName</option>
            }
        </select>
    </div>
    <button class="btn-add" @onclick="OpenAddTransactionModal">Add</button>
</div>

<div class="transaction-list">
    @foreach (var transaction in filteredTransactions)
    {
        <div class="cards-trans">
            <div class="date_head">
                <p>Transaction Id: @transaction.Id</p>
                <p>@transaction.Date.ToString("MM/dd/yyyy")</p>
            </div>

            <div class="amount">
                <p>Amount:  @(transaction.Debit > 0 ? transaction.Debit : transaction.Credit)</p>
                @* <td>@(filteredTransactions.Sum(t => t.Credit) - filteredTransactions.Sum(t => t.Debit))</td> *@
              
            </div>
            <div>
                <p>Type: @(transaction.Debit > 0 ? "Debit" : "Credit") </p>
                
            </div>
           <div class="description">
                <p> Note: @transaction.Description</p>
           </div>

            <div class="tags">
                <p>Tag:</p>
                @foreach (var tag in transaction.Tags)
                {
                    <span class="badge_tag">@tag.tagName</span>
                }
            </div>
        </div>
    }
</div>

@if (isAddTransactionModalVisible)
{
    <div class="modal" style="display: block; margin-top: 40px" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Transaction</h5>
                    <button type="button" class="close" @onclick="CloseAddTransactionModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="type">Transaction Type</label>
                            <select id="type" style="padding:12px 0;" @bind="selectedTransactionType" class="form-control">
                                <option value="Debit">Debit</option>
                                <option value="Credit">Credit</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="amount">Amount</label>
                            <InputNumber id="amount" @bind-Value="newTransactionAmount" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="tags">Tags</label>
                            <select id="tags" @bind="selectedTagId" class="form-control">
                                @foreach (var tag in availableTags)
                                {
                                    <option value="@tag.Id">@tag.tagName</option>
                                }
                                <option value="custom">Add Custom Tag</option>
                            </select>
                        </div>

                        @if (selectedTagId == "custom")
                        {
                            <div class="form-group">
                                <label for="customTag">Enter Custom Tag</label>
                                <InputText id="customTag" @bind-Value="customTag" class="form-control" />
                            </div>
                        }

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Add Transaction</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private User Data;
    private Transactions newTransaction = new Transactions();
    private List<Transactions> filteredTransactions = new List<Transactions>();
    private List<Tag> availableTags = new List<Tag>
    {
        new Tag { Id = 1, tagName = "Food" },
        new Tag { Id = 2, tagName = "Transport" },
        new Tag { Id = 3, tagName = "Entertainment" },
    };
    private string selectedTagId;
    private string customTag;
    private string selectedFilter = "All";
    private string selectedTransactionType = "Debit";
    private string selectedTagFilter = "All";
    private decimal newTransactionAmount;
    private bool isAddTransactionModalVisible = false;

    private string SelectedFilter
    {
        get => selectedFilter;
        set
        {
            if (selectedFilter != value)
            {
                selectedFilter = value;
                FilterTransactions();
            }
        }
    }

    private string SelectedTagFilter
    {
        get => selectedTagFilter;
        set
        {
            if (selectedTagFilter != value)
            {
                selectedTagFilter = value;
                FilterTransactionsByTag();
            }
        }
    }

    protected override void OnInitialized()
    {
        Data = UserService.LoadUsers().FirstOrDefault(u => u.Userid == LoginSession.LoggedInUser.Userid);

        if (Data != null)
        {
            filteredTransactions = Data.Transactions;
        }
    }

    private void HandleTransactionSubmit()
    {
        newTransaction.Id = Data.Transactions.Count + 1;
        newTransaction.Date = DateTime.Now;

        if (selectedTransactionType == "Debit")
        {
            newTransaction.Debit = newTransactionAmount;
            newTransaction.Credit = 0;
        }
        else if (selectedTransactionType == "Credit")
        {
            newTransaction.Credit = newTransactionAmount;
            newTransaction.Debit = 0;
        }

        if (selectedTagId == "custom" && !string.IsNullOrEmpty(customTag))
        {
            var newCustomTag = new Tag { Id = availableTags.Count + 1, tagName = customTag };
            availableTags.Add(newCustomTag);
            newTransaction.Tags.Add(newCustomTag);
        }
        else if (int.TryParse(selectedTagId, out var tagId))
        {
            var tag = availableTags.FirstOrDefault(t => t.Id == tagId);
            if (tag != null)
            {
                newTransaction.Tags.Add(tag);
            }
        }

        Data.Transactions.Add(newTransaction);
        UserService.SaveUsers(new List<User> { Data });

        newTransaction = new Transactions();
        newTransactionAmount = 0;
        selectedTagId = null;
        customTag = null;

        FilterTransactions();
        CloseAddTransactionModal();
    }

    private void FilterTransactions()
    {
        var transactions = Data.Transactions.AsEnumerable();

        if (selectedFilter == "Debit")
        {
            transactions = transactions.Where(t => t.Debit > 0);
        }
        else if (selectedFilter == "Credit")
        {
            transactions = transactions.Where(t => t.Credit > 0);
        }

        filteredTransactions = transactions.ToList();
    }

    private void FilterTransactionsByTag()
    {
        var transactions = Data.Transactions.AsEnumerable();

        if (selectedTagFilter != "All")
        {
            int tagId = int.Parse(selectedTagFilter);
            transactions = transactions.Where(t => t.Tags.Any(tag => tag.Id == tagId));
        }

        filteredTransactions = transactions.ToList();
    }

    private void OpenAddTransactionModal()
    {
        isAddTransactionModalVisible = true;
    }

    private void CloseAddTransactionModal()
    {
        isAddTransactionModalVisible = false;
    }
}
